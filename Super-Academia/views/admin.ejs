<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Listagem de Alunos</title>
    <link rel='stylesheet' src='../public/stylesheets/style.css' />
    <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon">

    <!-- CDN do Bootstrap pro site ficar bonitinho -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            background-color: #fff;
            height: 100%;
            margin: 0;
        }
        header {
            background-color: #007bff;
            color: white;
            text-align: center;
            padding: 20px 0;
            font-size: 1.5rem;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        .student_list {
            background-color: #fff;
            width: 600px;
            height: 600px;
            border: 1px solid #ccc;
            padding: 15px;
            border-radius: 8px;
            overflow-y: auto;
        }
        .student_header, 
        .student_item {
            display: flex;
            justify-content: space-between;
            padding: 10px;
            border-bottom: 1px solid black;
        }
        .student_header {
            font-weight: bold;
            border-bottom: 2px solid #000;
        }
    </style>
</head>
<body>
    <header class="bg-primary text-white text-center py-3">
      <h1>Painel do Admin</h1>
    </header>
    <div class="container">
        <div id="lista" class="student_list">
            <h3>Lista de Alunos</h3>
            <button onclick="criar()" class="btn btn-primary mb-3">Criar</button>
            <div class="student_header">
                <span>ID</span>
                <span>Nome</span>
                <span>Operações</span>
            </div>
        </div>
    </div>
    <script>
        
        const url = new URL(window.location.href);
        const token = url.searchParams.get('token'); // token (autorização)
        const id = url.searchParams.get('id'); // id do admin (1)

        async function lerDB(query) {
            // lê o banco de dados
            const res = await fetch('/ler-db', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ token: token, query: query })
            });
    
            return await res.json();
        }

        async function alterarDB(query) {
            // altera o banco de dados
            const res = await fetch('/alterar-db', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ token: token, query: query })
            });

            return await res.json();
        }

        function editar(i) {
            // ir para a página de edição de cliente
            window.location.href = `./admin-editar?token=${token}&id=${id}&userId=${i}`;
        }

        function criar() {
            // ir para a página de criação de cadastro de cliente
            window.location.href = `./admin-criar?token=${token}&id=${id}`;
        }

        async function deletar(id) {

            // deleta usuários. Não deixa deletar o admin  
            if (id != 1) {

                // deleta o cadastro
                await alterarDB(`DELETE FROM Cliente WHERE id = ${id};`);

                // conta quantos cadastros há agora
                let count = await lerDB("SELECT COUNT(*) FROM Cliente;");
                let c = count["COUNT(*)"];

                // atualiza o ID dos clientes subsequentes ao deletado para
                // que os IDs permaneçam sequenciais
                for (let i = 0; i <= c - id; i++) {
                    await alterarDB(`UPDATE Cliente SET id = ${id+i} WHERE id = ${i+id+1}`);
                }

                // atualiza a lista
                ler();

            } else {
                window.alert("Não é possível deletar o usuário do admin!");
            }

        }
            
        // função para ler o banco de dados e mostrar a lista de clientes
        async function ler() {

            // Reseta o HTML da lista
            document.getElementById("lista").innerHTML = '<h3>Lista de Alunos</h3><button onclick="criar()" class="btn btn-primary mb-3">Criar</button><div class="student_header"><span>ID</span><span>Nome</span><span>Operações</span></div>';

            // conta quantos itens há na tabela Cliente
            let count = await lerDB("SELECT COUNT(*) FROM Cliente;");
            let c = count["COUNT(*)"];

            // loop for para adicionar todos os cadastros existentes
            for (let i = 0; i < c; i++) {

                // lê o nome do cliente
                let result = await (lerDB(`SELECT nome FROM Cliente WHERE id = ${i+1}`));
                let nome = result.nome;
                let alunoHTML = document.createElement("div");
                alunoHTML.classList.add("student_item");

                // Cria o HTML do item da lista
                alunoHTML.innerHTML = `
                    <span>${i+1}</span>
                    <span>${nome}</span>
                    <span>
                        <button onclick="editar(${i+1})" class="btn btn-primary mb-3">Editar</button>
                        <button onclick="deletar(${i+1})" class="btn btn-primary mb-3">Excluir</button>
                    </span>
                `;
                // adiciona o HTML anterior à lista
                document.getElementById("lista").appendChild(alunoHTML);

            }

        }

        // Roda a função ler() assim que a página carregar
        document.addEventListener("DOMContentLoaded", ler);

    </script>
</body>
</html>